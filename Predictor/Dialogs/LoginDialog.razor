@using Predictor.Authentication
@inject IUserAccess userAccess
@inject NavigationManager navigation

<MudDialog>
	<DialogContent>
		<MudTextField @bind-Value="LoginText" Label="Login" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@IconDanger" AdornmentColor="Color.Secondary" Margin="Margin.Dense" UserAttributes="InputAttributes" />
		<MudTextField @bind-Value="PasswordText" Label="Password" Variant="Variant.Outlined" InputType="InputType.Password" Adornment="Adornment.End" AdornmentIcon="@IconDanger" AdornmentColor="Color.Secondary" Margin="Margin.Dense" UserAttributes="InputAttributes"/>
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel" Color="Color.Error">Cancel</MudButton>
		<MudButton OnClick="Login" Color="Color.Secondary">Login</MudButton>
	</DialogActions>
</MudDialog>

@code {
	[CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
	// User's HTML Attributes for Text Field (Not autosave login and password)
	private Dictionary<string, object> InputAttributes { get; set; } =
	new Dictionary<string, object>()
					{
			   { "autocomplete", "off" },
			   { "readonly", "readonly" },
			   { "onfocus", "this.removeAttribute('readonly');" },
					};

	public string LoginText { get; set; } = string.Empty;
	public string PasswordText { get; set; } = string.Empty;
	private string IconDanger { get; set; } = "";

	private void Cancel()
	{
		MudDialog.Cancel();
	}

	private void IconDangerReset()
	{
		IconDanger = string.Empty;
	}

	private async Task Login()
	{
		var userAccount = await userAccess.GetByLoginAsync(LoginText);

		if (userAccount is null || userAccount.Password != PasswordText)
		{
				IconDanger = Icons.TwoTone.Dangerous;
		}
		else
		{
			MudDialog.Close(DialogResult.Ok(new UserSession
				{
					UserName = userAccount.FirstName,
					Role = userAccount.UserRole.Value
				}));
			navigation.NavigateTo("/", true);
		}
	}
}
